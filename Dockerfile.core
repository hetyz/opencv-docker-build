# Dockerfile.core
FROM public.ecr.aws/lambda/provided:al2

# Csak a szükséges eszközök futásidőre
RUN yum update -y && \
    yum install -y curl jq && \
    yum clean all

# OpenCV teszt bináris
COPY --from=opencv-builder:latest /build/opencv/build/bin/opencv_test_core /var/task/opencv_test_core
COPY --from=opencv-builder:latest /build/opencv/build/lib/ /var/task/

WORKDIR /var/runtime
RUN echo '#!/bin/sh' > bootstrap && \
    echo 'set -euo pipefail' >> bootstrap && \
    echo 'HANDLER_PATH="/var/task/opencv_test_core"' >> bootstrap && \
    echo 'RIC="${AWS_LAMBDA_RUNTIME_API}"' >> bootstrap && \
    echo '[ -x "$HANDLER_PATH" ] || { echo "Not executable: $HANDLER_PATH" >&2; exit 127; }' >> bootstrap && \
    echo 'while true; do' >> bootstrap && \
    echo '  H=$(mktemp); B=$(mktemp)' >> bootstrap && \
    echo '  curl -sS -D "$H" -o "$B" "http://$RIC/2018-06-01/runtime/invocation/next" >/dev/null' >> bootstrap && \
    echo "  REQ_ID=\$(sed -n 's/\r$//;s/^Lambda-Runtime-Aws-Request-Id: //p' \"\$H\" | head -n1)" >> bootstrap && \
    echo '  RC=0' >> bootstrap && \
    echo '  "$HANDLER_PATH" --gtest_output=xml:/tmp/gtest.xml || RC=$?' >> bootstrap && \
    echo '  STATUS="ok"; [ "$RC" -ne 0 ] && STATUS="failed"' >> bootstrap && \
    echo "  printf '{\"status\":\"%s\",\"exit_code\":%s}' \"\$STATUS\" \"\$RC\" | \\" >> bootstrap && \
    echo '    curl -sS -X POST "http://$RIC/2018-06-01/runtime/invocation/$REQ_ID/response" \' >> bootstrap && \
    echo '         -H "Content-Type: application/json" -d @- >/dev/null' >> bootstrap && \
    echo '  rm -f "$H" "$B"' >> bootstrap && \
    echo 'done' >> bootstrap && \
    chmod +x bootstrap

ENV LD_LIBRARY_PATH=/var/task:/var/task/lib:/var/task/lib64:$LD_LIBRARY_PATH

ENTRYPOINT ["/var/runtime/bootstrap"]
