FROM public.ecr.aws/lambda/provided:al2

# + curl kell a Runtime API hívásához
RUN yum update -y && \
    yum install -y gtk2 libX11 libXext libXrender jq curl && \
    yum clean all

# OpenCV bináris(ok)
COPY --from=opencv-builder:latest /build/opencv/build/bin/opencv_test_core /var/task/opencv_test_core
# Ha maradtak dinamikus függőségek, tartsd meg ezt is; ha tényleg full statik, elhagyható:
COPY --from=opencv-builder:latest /build/opencv/build/lib/libopencv_*.so.* /var/task/ || true

# --- VALÓDI BOOTSTRAP (Runtime API loop) ---
WORKDIR /var/runtime
RUN cat > /var/runtime/bootstrap << 'EOF'\n\
#!/bin/sh\n\
set -euo pipefail\n\
HANDLER_PATH="/var/task/opencv_test_core"\n\
RIC="${AWS_LAMBDA_RUNTIME_API}"\n\
[ -x "$HANDLER_PATH" ] || { echo "Not executable: $HANDLER_PATH" >&2; exit 127; }\n\
while true; do\n\
  H=$(mktemp); B=$(mktemp)\n\
  curl -sS -D "$H" -o "$B" "http://$RIC/2018-06-01/runtime/invocation/next" >/dev/null\n\
  REQ_ID=$(awk -F': ' '/^Lambda-Runtime-Aws-Request-Id:/ {gsub("\r",""); print $2}' "$H")\n\
  RC=0\n\
  "$HANDLER_PATH" --gtest_output=xml:/tmp/gtest.xml || RC=$?\n\
  STATUS="ok"; [ "$RC" -ne 0 ] && STATUS="failed"\n\
  printf '{"status":"%s","exit_code":%s}' "$STATUS" "$RC" | \\\n\
    curl -sS -X POST "http://$RIC/2018-06-01/runtime/invocation/$REQ_ID/response" \\\n\
         -H "Content-Type: application/json" -d @- >/dev/null || true\n\
  rm -f "$H" "$B"\n\
done\n\
EOF
RUN chmod +x /var/runtime/bootstrap

# Dinamikus libekhez maradhat:
ENV LD_LIBRARY_PATH=/var/task:$LD_LIBRARY_PATH

ENTRYPOINT ["/var/runtime/bootstrap"]
