# Dockerfile.core
FROM public.ecr.aws/lambda/provided:al2

# Runtime API-hoz kell a curl
RUN yum update -y && \
    yum install -y gtk2 libX11 libXext libXrender jq curl && \
    yum clean all

# OpenCV teszt bináris
COPY --from=opencv-builder:latest /build/opencv/build/bin/opencv_test_core 
COPY --from=opencv-builder:latest /build/opencv/build/lib/libopencv_*.so.* /var/task/

# --- Valódi bootstrap (Lambda Runtime API loop) ---
WORKDIR /var/runtime
RUN cat > /var/runtime/bootstrap << 'EOF'
#!/bin/sh
set -euo pipefail

HANDLER_PATH="/var/task/opencv_test_core"
RIC="${AWS_LAMBDA_RUNTIME_API}"

[ -x "$HANDLER_PATH" ] || { echo "Not executable: $HANDLER_PATH" >&2; exit 127; }

while true; do
  # 1) Következő event
  H=$(mktemp); B=$(mktemp)
  curl -sS -D "$H" -o "$B" "http://$RIC/2018-06-01/runtime/invocation/next" >/dev/null
  REQ_ID=$(awk -F': ' '/^Lambda-Runtime-Aws-Request-Id:/ {gsub("\r",""); print $2}' "$H")

  # 2) Tesztek futtatása
  RC=0
  "$HANDLER_PATH" --gtest_output=xml:/tmp/gtest.xml || RC=$?

  # 3) Eredmény visszaküldése
  STATUS="ok"; [ "$RC" -ne 0 ] && STATUS="failed"
  printf '{"status":"%s","exit_code":%s}' "$STATUS" "$RC" | \
    curl -sS -X POST "http://$RIC/2018-06-01/runtime/invocation/$REQ_ID/response" \
         -H "Content-Type: application/json" -d @- >/dev/null

  rm -f "$H" "$B"
done
EOF
RUN chmod +x /var/runtime/bootstrap

ENV LD_LIBRARY_PATH=/var/task:$LD_LIBRARY_PATH

ENTRYPOINT ["/var/runtime/bootstrap"]
